<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ubuntu使用</title>
      <link href="/2025/02/19/09/"/>
      <url>/2025/02/19/09/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu-换源"><a href="#Ubuntu-换源" class="headerlink" title="Ubuntu 换源"></a>Ubuntu 换源</h1><h3 id="在使用-sudo-apt-get-update-和-sudo-apt-get-upgrade-进行更新时，可能下载会很慢，这个时候使用国内的镜像资源可能会明显提升下载速度。"><a href="#在使用-sudo-apt-get-update-和-sudo-apt-get-upgrade-进行更新时，可能下载会很慢，这个时候使用国内的镜像资源可能会明显提升下载速度。" class="headerlink" title="在使用 sudo apt-get update 和 sudo apt-get upgrade 进行更新时，可能下载会很慢，这个时候使用国内的镜像资源可能会明显提升下载速度。"></a>在使用 sudo apt-get update 和 sudo apt-get upgrade 进行更新时，可能下载会很慢，这个时候使用国内的镜像资源可能会明显提升下载速度。</h3><blockquote><h3 id="先是要备份原来的源文件"><a href="#先是要备份原来的源文件" class="headerlink" title="先是要备份原来的源文件"></a>先是要备份原来的源文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><h3 id="再编辑-sources-list-文件"><a href="#再编辑-sources-list-文件" class="headerlink" title="再编辑 sources.list 文件"></a>再编辑 sources.list 文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure><h3 id="这里使用阿里云的镜像"><a href="#这里使用阿里云的镜像" class="headerlink" title="这里使用阿里云的镜像"></a>这里使用阿里云的镜像</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://mirrors.aliyun.com/ubuntu/</span><br></pre></td></tr></table></figure><h3 id="替换后，再进行更新"><a href="#替换后，再进行更新" class="headerlink" title="替换后，再进行更新"></a>替换后，再进行更新</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Learning </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第七弹</title>
      <link href="/2025/02/18/08/"/>
      <url>/2025/02/18/08/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程与回调函数"><a href="#多线程与回调函数" class="headerlink" title="多线程与回调函数"></a>多线程与回调函数</h1><h3 id="需要下载一个-cpp-httplib-，下载到-workspace-src-demo-one-pkg-include"><a href="#需要下载一个-cpp-httplib-，下载到-workspace-src-demo-one-pkg-include" class="headerlink" title="需要下载一个 cpp-httplib ，下载到 workspace&#x2F;src&#x2F;demo_one_pkg&#x2F;include&#x2F;"></a>需要下载一个 cpp-httplib ，下载到 workspace&#x2F;src&#x2F;demo_one_pkg&#x2F;include&#x2F;</h3><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/ohhuo/cpp-httplib.git</span><br></pre></td></tr></table></figure><h3 id="下载后得到如下文件"><a href="#下载后得到如下文件" class="headerlink" title="下载后得到如下文件"></a>下载后得到如下文件</h3><p><img src="http://picbed.yanzu.tech/img/learn_ros2/pic_12.png"></p></blockquote><h3 id="下载好之后，修改-demo-one-pkg-的-CMakeLists-文件"><a href="#下载好之后，修改-demo-one-pkg-的-CMakeLists-文件" class="headerlink" title="下载好之后，修改 demo_one_pkg 的 CMakeLists 文件"></a>下载好之后，修改 demo_one_pkg 的 CMakeLists 文件</h3><blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 包含 cpp-httplib 的 include</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="keyword">include</span>)</span><br></pre></td></tr></table></figure></blockquote><h3 id="接着，在-demo-one-pkg-src-下创建-learn-thread-cpp，内容如下"><a href="#接着，在-demo-one-pkg-src-下创建-learn-thread-cpp，内容如下" class="headerlink" title="接着，在 demo_one_pkg&#x2F;src 下创建 learn_thread.cpp，内容如下"></a>接着，在 demo_one_pkg&#x2F;src 下创建 learn_thread.cpp，内容如下</h3><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span><span class="comment">// 多线程</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span><span class="comment">// 时间相关</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span><span class="comment">// 函数包装器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cpp-httplib/httplib.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;future&gt;</span><span class="comment">// 用于 std::async 处理异步任务</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Download</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 下载函数,负责下载文件并调用回调函数</span></span><br><span class="line"><span class="comment">// host 主机， path 路径，回调函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">download</span><span class="params">(<span class="type">const</span> std::string&amp; host, <span class="type">const</span> std::string&amp; path, <span class="type">const</span> std::function&lt;<span class="type">void</span>(<span class="type">const</span> std::string &amp;, <span class="type">const</span> std::string &amp;)&gt; &amp;callback_word_count)</span></span>&#123;</span><br><span class="line"><span class="comment">// 输出当前线程ID，便于调试</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;线程编号： &quot;</span> &lt;&lt; std::this_thread::<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// 创建客户端对象，指定主机</span></span><br><span class="line"><span class="function">httplib::Client <span class="title">client</span><span class="params">(host)</span></span>;</span><br><span class="line"><span class="comment">// 发送 GET 请求，获取文件内容</span></span><br><span class="line"><span class="keyword">auto</span> response = client.<span class="built_in">Get</span>(path);</span><br><span class="line"><span class="comment">// 如果请求成功且状态码为200</span></span><br><span class="line"><span class="keyword">if</span>(response &amp;&amp; response-&gt;status == <span class="number">200</span>)&#123;</span><br><span class="line"><span class="comment">// 调用回调函数并传递文件内容</span></span><br><span class="line"><span class="built_in">callback_word_count</span>(path, response-&gt;body);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 启动下载函数,使用 std::async 异步执行下载任务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">start_download</span><span class="params">(<span class="type">const</span> std::string&amp; host, <span class="type">const</span> std::string&amp; path, <span class="type">const</span> std::function&lt;<span class="type">void</span>(<span class="type">const</span> std::string &amp;, <span class="type">const</span> std::string &amp;)&gt; &amp;callback_word_count)</span></span>&#123;</span><br><span class="line"><span class="comment">// 函数包装器进行包装</span></span><br><span class="line"><span class="comment">// auto download_fun = std::bind(&amp;Download::start_download, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3);</span></span><br><span class="line"><span class="comment">// 创建线程</span></span><br><span class="line"><span class="comment">// std::thread thread(download_fun, host, path, callback_word_count);</span></span><br><span class="line"><span class="comment">// 等待线程结束</span></span><br><span class="line"><span class="comment">// thread.join();</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// 直接通过 std::async 可以异步执行任务，同时它会返回一个 std::future 对象，保证任务的异步执行，而主线程会等待任务完成</span></span><br><span class="line"><span class="comment">// std::launch::async 会指示 std::async 强制使用新的线程执行任务</span></span><br><span class="line"><span class="keyword">auto</span> future = std::<span class="built_in">async</span>(std::launch::async, [=]()&#123;</span><br><span class="line"><span class="built_in">download</span>(host, path, callback_word_count);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> d = <span class="built_in">Download</span>();</span><br><span class="line"><span class="comment">// 创建回调函数, path 地址， result 结果</span></span><br><span class="line"><span class="keyword">auto</span> word_count = [](<span class="type">const</span> std::string &amp;path, <span class="type">const</span> std::string &amp;result) -&gt; <span class="type">void</span>&#123;</span><br><span class="line"><span class="comment">// 输出文件路径，文件内容的长度，以及文件内容的前五个字符</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;下载完成 &quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; result.<span class="built_in">length</span>() &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; result.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">5</span>) &lt;&lt; std::endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动多个下载任务，分别下载 novel1.txt、novel2.txt 和 novel3.txt</span></span><br><span class="line">d.<span class="built_in">start_download</span>(<span class="string">&quot;http://0.0.0.0:8080&quot;</span>, <span class="string">&quot;/novel1.txt&quot;</span>, word_count);</span><br><span class="line">d.<span class="built_in">start_download</span>(<span class="string">&quot;http://0.0.0.0:8080&quot;</span>, <span class="string">&quot;/novel2.txt&quot;</span>, word_count);</span><br><span class="line">d.<span class="built_in">start_download</span>(<span class="string">&quot;http://0.0.0.0:8080&quot;</span>, <span class="string">&quot;/novel3.txt&quot;</span>, word_count);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主线程休眠10秒，确保所有异步线程有足够时间完成下载任务</span></span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">1000</span>*<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="这里需要注意的是-std-async-的用法"><a href="#这里需要注意的是-std-async-的用法" class="headerlink" title="这里需要注意的是 std::async 的用法"></a>这里需要注意的是 std::async 的用法</h3><blockquote><h3 id="它是-C-11-引入的一个标准库函数，用于启动异步任务。它接受一个可调用对象（比如函数、函数指针、Lambda-表达式等）和一些参数，并返回一个-std-future-对象，表示异步操作的结果。"><a href="#它是-C-11-引入的一个标准库函数，用于启动异步任务。它接受一个可调用对象（比如函数、函数指针、Lambda-表达式等）和一些参数，并返回一个-std-future-对象，表示异步操作的结果。" class="headerlink" title="它是 C++11 引入的一个标准库函数，用于启动异步任务。它接受一个可调用对象（比如函数、函数指针、Lambda 表达式等）和一些参数，并返回一个 std::future 对象，表示异步操作的结果。"></a>它是 C++11 引入的一个标准库函数，用于启动异步任务。它接受一个可调用对象（比如函数、函数指针、Lambda 表达式等）和一些参数，并返回一个 std::future 对象，表示异步操作的结果。</h3><h3 id="语法如下"><a href="#语法如下" class="headerlink" title="语法如下"></a>语法如下</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::future&lt;T&gt; <span class="title">async</span><span class="params">(std::launch policy, F&amp;&amp; f, Args&amp;&amp;... args)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="std-launch-指定任务的执行策略，如-std-launch-async-或-std-launch-deferred。前者是任务会异步启动并在独立的线程中执行后者是任务会被推迟执行，直到调用-future-get-时，才会在当前线程中执行。"><a href="#std-launch-指定任务的执行策略，如-std-launch-async-或-std-launch-deferred。前者是任务会异步启动并在独立的线程中执行后者是任务会被推迟执行，直到调用-future-get-时，才会在当前线程中执行。" class="headerlink" title="std::launch 指定任务的执行策略，如 std::launch::async 或 std::launch::deferred。前者是任务会异步启动并在独立的线程中执行后者是任务会被推迟执行，直到调用 future.get() 时，才会在当前线程中执行。"></a>std::launch 指定任务的执行策略，如 std::launch::async 或 std::launch::deferred。前者是任务会异步启动并在独立的线程中执行后者是任务会被推迟执行，直到调用 future.get() 时，才会在当前线程中执行。</h3><h3 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[捕获列表](参数列表) -&gt; 返回类型 &#123; 函数体 &#125;</span><br></pre></td></tr></table></figure><h3 id="：按值捕获外部变量"><a href="#：按值捕获外部变量" class="headerlink" title="[&#x3D;] ：按值捕获外部变量"></a>[&#x3D;] ：按值捕获外部变量</h3><h3 id="按引用捕获外部变量"><a href="#按引用捕获外部变量" class="headerlink" title="[&amp;] : 按引用捕获外部变量"></a>[&amp;] : 按引用捕获外部变量</h3></blockquote></blockquote><h3 id="在-CMakeLists-文件中添加相应语句"><a href="#在-CMakeLists-文件中添加相应语句" class="headerlink" title="在 CMakeLists 文件中添加相应语句"></a>在 CMakeLists 文件中添加相应语句</h3><blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加可执行文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(learn_thread src/learn_thread.cpp)</span><br><span class="line"><span class="comment"># 将节点拷贝到install</span></span><br><span class="line"><span class="keyword">install</span>(TARGETS demo_one_node person_node learn_shared_ptr learn_lambda learn_functional learn_thread</span><br><span class="line">DESTINATION lib/<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></blockquote><h3 id="在-chapter2-ws-目录下创建三个-txt-文件，并写入简单的内容，然后在该路径下运行本地服务器，并保持打开状态"><a href="#在-chapter2-ws-目录下创建三个-txt-文件，并写入简单的内容，然后在该路径下运行本地服务器，并保持打开状态" class="headerlink" title="在 chapter2_ws 目录下创建三个 txt 文件，并写入简单的内容，然后在该路径下运行本地服务器，并保持打开状态"></a>在 chapter2_ws 目录下创建三个 txt 文件，并写入简单的内容，然后在该路径下运行本地服务器，并保持打开状态</h3><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;第一章 hello word&quot; &gt; novel1.txt</span><br><span class="line">echo &quot;第二章 hello guys&quot; &gt; novel2.txt</span><br><span class="line">echo &quot;第三章 hello girls&quot; &gt; novel3.txt</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server</span><br></pre></td></tr></table></figure><p><img src="http://picbed.yanzu.tech/img/learn_ros2/pic_13.png"></p></blockquote><h3 id="在同一路径下打开另外一个终端，编译并执行-learn-thread-节点"><a href="#在同一路径下打开另外一个终端，编译并执行-learn-thread-节点" class="headerlink" title="在同一路径下打开另外一个终端，编译并执行 learn_thread 节点"></a>在同一路径下打开另外一个终端，编译并执行 learn_thread 节点</h3><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">colcon build</span><br><span class="line">source install/setup.bash</span><br><span class="line">ros2 run demo_one_pkg learn_thread</span><br></pre></td></tr></table></figure><h3 id="执行后会得到如下输出"><a href="#执行后会得到如下输出" class="headerlink" title="执行后会得到如下输出"></a>执行后会得到如下输出</h3><p><img src="http://picbed.yanzu.tech/img/learn_ros2/pic_14.png"></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ROS2 </tag>
            
            <tag> Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六弹</title>
      <link href="/2025/02/17/07/"/>
      <url>/2025/02/17/07/</url>
      
        <content type="html"><![CDATA[<h1 id="ROS2-中，cpp新特性的应用"><a href="#ROS2-中，cpp新特性的应用" class="headerlink" title="ROS2 中，cpp新特性的应用"></a>ROS2 中，cpp新特性的应用</h1><h3 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h3><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// auto 自动推导类型</span></span><br><span class="line"><span class="keyword">auto</span> a = <span class="number">1</span>; <span class="comment">// int a = 1</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h3><blockquote><h3 id="智能指针分为三种"><a href="#智能指针分为三种" class="headerlink" title="智能指针分为三种"></a>智能指针分为三种</h3><ul><li><h4 id="shared-ptr-共享的智能指针"><a href="#shared-ptr-共享的智能指针" class="headerlink" title="shared_ptr 共享的智能指针"></a>shared_ptr 共享的智能指针</h4></li><li><h4 id="weak-ptr-弱引用的智能指针"><a href="#weak-ptr-弱引用的智能指针" class="headerlink" title="weak_ptr 弱引用的智能指针"></a>weak_ptr 弱引用的智能指针</h4></li><li><h4 id="unique-ptr-独占的智能指针"><a href="#unique-ptr-独占的智能指针" class="headerlink" title="unique_ptr 独占的智能指针"></a>unique_ptr 独占的智能指针</h4></li></ul><h3 id="std-shared-ptr-是一个类模板，它的对象的行为类似于指针，它可以记录共享它所管理的内存对象的对象个数。多个共享指针可以共享同一个对象，当最后一个共享指针被销毁时，会自动释放其所指向的对象。一个共享指针通常使用-make-shared-来创建，也可以通过拷贝或者赋值其他共享指针的方式创建。"><a href="#std-shared-ptr-是一个类模板，它的对象的行为类似于指针，它可以记录共享它所管理的内存对象的对象个数。多个共享指针可以共享同一个对象，当最后一个共享指针被销毁时，会自动释放其所指向的对象。一个共享指针通常使用-make-shared-来创建，也可以通过拷贝或者赋值其他共享指针的方式创建。" class="headerlink" title="std::shared_ptr 是一个类模板，它的对象的行为类似于指针，它可以记录共享它所管理的内存对象的对象个数。多个共享指针可以共享同一个对象，当最后一个共享指针被销毁时，会自动释放其所指向的对象。一个共享指针通常使用 make_shared&lt;&gt; 来创建，也可以通过拷贝或者赋值其他共享指针的方式创建。"></a>std::shared_ptr<T> 是一个类模板，它的对象的行为类似于指针，它可以记录共享它所管理的内存对象的对象个数。多个共享指针可以共享同一个对象，当最后一个共享指针被销毁时，会自动释放其所指向的对象。一个共享指针通常使用 make_shared&lt;&gt; 来创建，也可以通过拷贝或者赋值其他共享指针的方式创建。</h3><h3 id="代码示例，在-demo-one-pkg-src-下创建-learn-shared-ptr-cpp"><a href="#代码示例，在-demo-one-pkg-src-下创建-learn-shared-ptr-cpp" class="headerlink" title="代码示例，在 demo_one_pkg&#x2F;src&#x2F; 下创建 learn_shared_ptr.cpp"></a>代码示例，在 demo_one_pkg&#x2F;src&#x2F; 下创建 learn_shared_ptr.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建共享智能指针 &lt;数据类型/类&gt;(参数) 返回值，对应类的共享指针</span></span><br><span class="line"><span class="keyword">auto</span> p1 = std::<span class="built_in">make_shared</span>&lt;std::string&gt;(<span class="string">&quot;This is a string.&quot;</span>);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;p1的引用计数: &quot;</span> &lt;&lt; p<span class="number">1.</span><span class="built_in">use_count</span>() &lt;&lt; <span class="string">&quot;, 指向内存地址: &quot;</span> &lt;&lt; p<span class="number">1.</span><span class="built_in">get</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> p2 = p1;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;p1的引用计数: &quot;</span> &lt;&lt; p<span class="number">1.</span><span class="built_in">use_count</span>() &lt;&lt; <span class="string">&quot;, 指向内存地址: &quot;</span> &lt;&lt; p<span class="number">1.</span><span class="built_in">get</span>() &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;p2的引用计数: &quot;</span> &lt;&lt; p<span class="number">2.</span><span class="built_in">use_count</span>() &lt;&lt; <span class="string">&quot;, 指向内存地址: &quot;</span> &lt;&lt; p<span class="number">2.</span><span class="built_in">get</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放引用</span></span><br><span class="line">p<span class="number">1.</span><span class="built_in">reset</span>();</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;p1的引用计数: &quot;</span> &lt;&lt; p<span class="number">1.</span><span class="built_in">use_count</span>() &lt;&lt; <span class="string">&quot;, 指向内存地址: &quot;</span> &lt;&lt; p<span class="number">1.</span><span class="built_in">get</span>() &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;p2的引用计数: &quot;</span> &lt;&lt; p<span class="number">2.</span><span class="built_in">use_count</span>() &lt;&lt; <span class="string">&quot;, 指向内存地址: &quot;</span> &lt;&lt; p<span class="number">2.</span><span class="built_in">get</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// p2-&gt;c_str() 调用成员函数</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;p2的指向内存地址数据: &quot;</span> &lt;&lt; p2-&gt;<span class="built_in">c_str</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在-CMakeLists-文件中添加"><a href="#在-CMakeLists-文件中添加" class="headerlink" title="在 CMakeLists 文件中添加"></a>在 CMakeLists 文件中添加</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 添加可执行文件</span><br><span class="line">add_executable(learn_shared_ptr src/learn_shared_ptr.cpp)</span><br><span class="line"># 拷贝节点到install</span><br><span class="line">install(TARGETS demo_one_node person_node learn_shared_ptr</span><br><span class="line">DESTINATION lib/$&#123;PROJECT_NAME&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="编译并执行"><a href="#编译并执行" class="headerlink" title="编译并执行"></a>编译并执行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">colcon build</span><br><span class="line">source install/setup.bash</span><br><span class="line">ros2 run demo_one_pkg learn_shared_ptr</span><br></pre></td></tr></table></figure><p><img src="http://picbed.yanzu.tech/img/learn_ros2/pic_9.png"></p></blockquote><h3 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h3><blockquote><h3 id="可以利用它来编写内嵌的匿名函数，用以替换独立函数或函数对象。"><a href="#可以利用它来编写内嵌的匿名函数，用以替换独立函数或函数对象。" class="headerlink" title="可以利用它来编写内嵌的匿名函数，用以替换独立函数或函数对象。"></a>可以利用它来编写内嵌的匿名函数，用以替换独立函数或函数对象。</h3><h3 id="代码示例，在-demo-one-pkg-src-下创建-learn-lambda-cpp"><a href="#代码示例，在-demo-one-pkg-src-下创建-learn-lambda-cpp" class="headerlink" title="代码示例，在 demo_one_pkg&#x2F;src&#x2F; 下创建 learn_lambda.cpp"></a>代码示例，在 demo_one_pkg&#x2F;src&#x2F; 下创建 learn_lambda.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [] 是捕获参数列表，() 中放置参数，&#123;&#125; 中是函数体， -&gt; 后面是返回类型</span></span><br><span class="line"><span class="keyword">auto</span> add = [](<span class="type">int</span> a, <span class="type">int</span> b) -&gt; <span class="type">int</span> &#123;<span class="keyword">return</span> a + b;&#125;;</span><br><span class="line"><span class="type">int</span> sum = <span class="built_in">add</span>(<span class="number">200</span>, <span class="number">50</span>);</span><br><span class="line"><span class="comment">// 这里的 [sum] 可以替换为 [&amp;]，后者可以捕获其之前的所有参数</span></span><br><span class="line"><span class="keyword">auto</span> print_sum = [sum]() -&gt; <span class="type">void</span> &#123;std::cout &lt;&lt; sum &lt;&lt; std::endl;&#125;;</span><br><span class="line"><span class="built_in">print_sum</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在-CMakeLists-文件中添加-1"><a href="#在-CMakeLists-文件中添加-1" class="headerlink" title="在 CMakeLists 文件中添加"></a>在 CMakeLists 文件中添加</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 添加可执行文件</span><br><span class="line">add_executable(learn_lambda src/learn_lambda.cpp)</span><br><span class="line"># 拷贝节点到install</span><br><span class="line">install(TARGETS demo_one_node person_node learn_shared_ptr learn_lambda</span><br><span class="line">DESTINATION lib/$&#123;PROJECT_NAME&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="编译并执行-1"><a href="#编译并执行-1" class="headerlink" title="编译并执行"></a>编译并执行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">colcon build</span><br><span class="line">source install/setup.bash</span><br><span class="line">ros2 run demo_one_pkg learn_lambda</span><br></pre></td></tr></table></figure><p><img src="http://picbed.yanzu.tech/img/learn_ros2/pic_10.png"></p></blockquote><h3 id="函数包装器"><a href="#函数包装器" class="headerlink" title="函数包装器"></a>函数包装器</h3><blockquote><h3 id="cpp-中函数可大致分为三类，一类是自由函数，一类是成员函数，另外一类就是-Lambda函数。三种函数的调用方式不同，自由函数直接函数名加参数调用，成员函数需要对象来调用。函数包装器就是用于统一这三种函数的调用方式的。"><a href="#cpp-中函数可大致分为三类，一类是自由函数，一类是成员函数，另外一类就是-Lambda函数。三种函数的调用方式不同，自由函数直接函数名加参数调用，成员函数需要对象来调用。函数包装器就是用于统一这三种函数的调用方式的。" class="headerlink" title="cpp 中函数可大致分为三类，一类是自由函数，一类是成员函数，另外一类就是 Lambda函数。三种函数的调用方式不同，自由函数直接函数名加参数调用，成员函数需要对象来调用。函数包装器就是用于统一这三种函数的调用方式的。"></a>cpp 中函数可大致分为三类，一类是自由函数，一类是成员函数，另外一类就是 Lambda函数。三种函数的调用方式不同，自由函数直接函数名加参数调用，成员函数需要对象来调用。函数包装器就是用于统一这三种函数的调用方式的。</h3><h3 id="代码示例，在-demo-one-pkg-src-下创建-learn-functional-cpp"><a href="#代码示例，在-demo-one-pkg-src-下创建-learn-functional-cpp" class="headerlink" title="代码示例，在 demo_one_pkg&#x2F;src&#x2F; 下创建 learn_functional.cpp"></a>代码示例，在 demo_one_pkg&#x2F;src&#x2F; 下创建 learn_functional.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span><span class="comment">// 函数包装器头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自由函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save_with_free_fun</span><span class="params">(<span class="type">const</span> std::string &amp; file_name)</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;自由函数: &quot;</span> &lt;&lt; file_name &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileSave</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">FileSave</span>() = <span class="keyword">default</span>;</span><br><span class="line">~<span class="built_in">FileSave</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成员函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save_with_member_fun</span><span class="params">(<span class="type">const</span> std::string &amp; file_name)</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;成员函数: &quot;</span> &lt;&lt; file_name &lt;&lt; std::endl;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">FileSave file_save;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lambda 函数</span></span><br><span class="line"><span class="keyword">auto</span> save_with_lambda_fun = [](<span class="type">const</span> std::string &amp; file_name) -&gt; <span class="type">void</span> &#123;std::cout &lt;&lt; <span class="string">&quot;Lambda 函数: &quot;</span> &lt;&lt; file_name &lt;&lt; std::endl;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 未统一调用</span></span><br><span class="line"><span class="built_in">save_with_free_fun</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line">file_save.<span class="built_in">save_with_member_fun</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line"><span class="built_in">save_with_lambda_fun</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用函数包装器统一调用</span></span><br><span class="line">std::function&lt;<span class="type">void</span>(<span class="type">const</span> std::string&amp;)&gt;save1 = save_with_free_fun;</span><br><span class="line"><span class="comment">// 成员函数放入包装器较为复杂，涉及三个参数</span></span><br><span class="line">std::function&lt;<span class="type">void</span>(<span class="type">const</span> std::string&amp;)&gt;save2 = std::<span class="built_in">bind</span>(&amp;FileSave::save_with_member_fun, &amp;file_save, std::placeholders::_1);</span><br><span class="line">std::function&lt;<span class="type">void</span>(<span class="type">const</span> std::string&amp;)&gt;save3 = save_with_lambda_fun;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="built_in">save1</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line"><span class="built_in">save2</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line"><span class="built_in">save3</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在-CMakeLists-文件中添加-2"><a href="#在-CMakeLists-文件中添加-2" class="headerlink" title="在 CMakeLists 文件中添加"></a>在 CMakeLists 文件中添加</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 添加可执行文件</span><br><span class="line">add_executable(learn_functional src/learn_functional.cpp)</span><br><span class="line"># 拷贝节点到install</span><br><span class="line">install(TARGETS demo_one_node person_node learn_shared_ptr learn_lambda learn_functional</span><br><span class="line">DESTINATION lib/$&#123;PROJECT_NAME&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="编译并执行-2"><a href="#编译并执行-2" class="headerlink" title="编译并执行"></a>编译并执行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">colcon build</span><br><span class="line">source install/setup.bash</span><br><span class="line">ros2 run demo_one_pkg learn_functional</span><br></pre></td></tr></table></figure><p><img src="http://picbed.yanzu.tech/img/learn_ros2/pic_11.png"></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ROS2 </tag>
            
            <tag> Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五弹</title>
      <link href="/2025/02/17/06/"/>
      <url>/2025/02/17/06/</url>
      
        <content type="html"><![CDATA[<h1 id="ROS2基础：cpp面向对象编程"><a href="#ROS2基础：cpp面向对象编程" class="headerlink" title="ROS2基础：cpp面向对象编程"></a>ROS2基础：cpp面向对象编程</h1><h3 id="在-chapter2-ws-sec-demo-one-pkg-src-下创建一个-person-node-cpp"><a href="#在-chapter2-ws-sec-demo-one-pkg-src-下创建一个-person-node-cpp" class="headerlink" title="在 chapter2_ws&#x2F;sec&#x2F;demo_one_pkg&#x2F;src 下创建一个 person_node.cpp"></a>在 chapter2_ws&#x2F;sec&#x2F;demo_one_pkg&#x2F;src 下创建一个 person_node.cpp</h3><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd chapter2_ws/src/demo_one_pkg/src</span><br><span class="line">touch person_node.cpp</span><br><span class="line">gedit person_node.cpp</span><br></pre></td></tr></table></figure></blockquote><h3 id="然后，编辑-person-node-cpp-的内容"><a href="#然后，编辑-person-node-cpp-的内容" class="headerlink" title="然后，编辑 person_node.cpp 的内容"></a>然后，编辑 person_node.cpp 的内容</h3><blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类，使其继承 Node</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonNode</span> : <span class="keyword">public</span> rclcpp::Node&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string name_;</span><br><span class="line"><span class="type">int</span> age_;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 构造函数,调用父类的构造函数,属性初始化</span></span><br><span class="line"><span class="built_in">PersonNode</span>(<span class="type">const</span> std::string &amp;node_name, <span class="type">const</span> std::string &amp;name, <span class="type">const</span> <span class="type">int</span> &amp;age):<span class="built_in">Node</span>(node_name)&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;name_ = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;age_ = age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">(<span class="type">const</span> std::string &amp;food_name)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 这里用的是 C 的格式化输出，故需要将 name_ 转换为 C 风格的字符串</span></span><br><span class="line"><span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;I&#x27;m %s, %d years old and love eatting %s&quot;</span>, <span class="keyword">this</span>-&gt;name_.<span class="built_in">c_str</span>(), <span class="keyword">this</span>-&gt;age_, food_name.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span>&#123;</span><br><span class="line">rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line"><span class="comment">// 这里的 make_shared 需要修改为 PersonNode 类型,传入的参数个数和形式必须与上面的PersonNode的一致</span></span><br><span class="line"><span class="keyword">auto</span> node = std::<span class="built_in">make_shared</span>&lt;PersonNode&gt;(<span class="string">&quot;person_node&quot;</span>,<span class="string">&quot;Peter&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="built_in">RCLCPP_INFO</span>(node-&gt;<span class="built_in">get_logger</span>(),<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="comment">// 如果上面的 make_shared 不修改为 PersonNode 类型，那么这里无法调用其公共函数</span></span><br><span class="line">node-&gt;<span class="built_in">eat</span>(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">rclcpp::<span class="built_in">spin</span>(node);</span><br><span class="line">rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="修改-demo-one-pkg-的-CmakeLists-文件"><a href="#修改-demo-one-pkg-的-CmakeLists-文件" class="headerlink" title="修改 demo_one_pkg 的 CmakeLists 文件"></a>修改 demo_one_pkg 的 CmakeLists 文件</h3><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加可执行文件</span></span><br><span class="line">add_executable(demo_one_node src/demo_one.cpp)</span><br><span class="line">add_executable(person_node src/person_node.cpp)# 添加这句</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加依赖</span></span><br><span class="line">ament_target_dependencies(demo_one_node rclcpp)</span><br><span class="line">ament_target_dependencies(person_node rclcpp)# 添加这句</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝节点到 install</span></span><br><span class="line">install(TARGETS demo_one_node person_node</span><br><span class="line">DESTINATION lib/$&#123;PROJECT_NAME&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></blockquote><h3 id="重新编译并执行"><a href="#重新编译并执行" class="headerlink" title="重新编译并执行"></a>重新编译并执行</h3><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ./learn_ros2/chapter_2/chapter2_ws/</span><br><span class="line">colcon build</span><br><span class="line">ros2 run demo_one_pkg person_node</span><br></pre></td></tr></table></figure><p><img src="http://picbed.yanzu.tech/img/learn_ros2/pic_8.png"></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ROS2 </tag>
            
            <tag> Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四弹</title>
      <link href="/2025/01/03/05/"/>
      <url>/2025/01/03/05/</url>
      
        <content type="html"><![CDATA[<h1 id="使用功能包组织cpp节点"><a href="#使用功能包组织cpp节点" class="headerlink" title="使用功能包组织cpp节点"></a>使用功能包组织cpp节点</h1><blockquote><h3 id="创建一个功能包，这里所在的目录是-learn-ros2-chapter-2"><a href="#创建一个功能包，这里所在的目录是-learn-ros2-chapter-2" class="headerlink" title="创建一个功能包，这里所在的目录是  ~&#x2F;learn_ros2&#x2F;chapter_2&#x2F;"></a>创建一个功能包，这里所在的目录是  ~&#x2F;learn_ros2&#x2F;chapter_2&#x2F;</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 pkg create demo_one_pkg --build-type ament_cmake --license Apache-2.0</span><br></pre></td></tr></table></figure><h3 id="创建好之后显示以下信息，"><a href="#创建好之后显示以下信息，" class="headerlink" title="创建好之后显示以下信息，"></a>创建好之后显示以下信息，</h3><p><img src="http://picbed.yanzu.tech/img/learn_ros2/pic_5.png"></p><h3 id="目录结构如下，include-demo-one-pkg-文件用于存放编写的头文件-库文件"><a href="#目录结构如下，include-demo-one-pkg-文件用于存放编写的头文件-库文件" class="headerlink" title="目录结构如下，include&#x2F;demo_one_pkg 文件用于存放编写的头文件&#x2F;库文件"></a>目录结构如下，include&#x2F;demo_one_pkg 文件用于存放编写的头文件&#x2F;库文件</h3><p><img src="http://picbed.yanzu.tech/img/learn_ros2/pic_6.png"></p><h3 id="创建好包之后，进入-demo-one-pkg-src-目录下，创建一个-cpp-文件，这里叫-demo-one-cpp，内容如下，"><a href="#创建好包之后，进入-demo-one-pkg-src-目录下，创建一个-cpp-文件，这里叫-demo-one-cpp，内容如下，" class="headerlink" title="创建好包之后，进入 demo_one_pkg&#x2F;src&#x2F; 目录下，创建一个 .cpp 文件，这里叫 demo_one.cpp，内容如下，"></a>创建好包之后，进入 demo_one_pkg&#x2F;src&#x2F; 目录下，创建一个 .cpp 文件，这里叫 demo_one.cpp，内容如下，</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化参数</span></span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    <span class="comment">// 创建节点</span></span><br><span class="line">    <span class="keyword">auto</span> node = std::<span class="built_in">make_shared</span>&lt;rclcpp::Node&gt;(<span class="string">&quot;demo_one_node&quot;</span>);</span><br><span class="line">    <span class="comment">// 打印日志</span></span><br><span class="line">    <span class="built_in">RCLCPP_INFO</span>(node-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="comment">// 运行节点</span></span><br><span class="line">    rclcpp::<span class="built_in">spin</span>(node);</span><br><span class="line">    <span class="comment">// 关闭节点</span></span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回上一级目录，即-demo-one-pkg-，编辑-CMakeLists-txt"><a href="#返回上一级目录，即-demo-one-pkg-，编辑-CMakeLists-txt" class="headerlink" title="返回上一级目录，即 demo_one_pkg&#x2F;，编辑 CMakeLists.txt"></a>返回上一级目录，即 demo_one_pkg&#x2F;，编辑 CMakeLists.txt</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.8)</span><br><span class="line">project(demo_one_pkg)</span><br><span class="line"></span><br><span class="line">if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;)</span><br><span class="line">  add_compile_options(-Wall -Wextra -Wpedantic)</span><br><span class="line">endif()</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到依赖</span></span><br><span class="line">find_package(ament_cmake REQUIRED)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.查找 rclcpp 的头文件和库文件</span></span><br><span class="line">find_package(rclcpp REQUIRED)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">uncomment the following section <span class="keyword">in</span> order to fill <span class="keyword">in</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">further dependencies manually.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">find_package(&lt;dependency&gt; REQUIRED)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.添加可执行文件，(节点名，源文件地址)</span></span><br><span class="line">add_executable(demo_one_node src/demo_one.cpp)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">头文件包含</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">target_inlude_directories(demo_one_node PUBLIC <span class="variable">$&#123;rclcpp_INCLUDE_DIRS&#125;</span>)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">库文件链接</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">target_link_libraries(demo_one_node <span class="variable">$&#123;rclcpp_LIBRARIES&#125;</span>)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上面两句用这一句代替,他是依赖于 find_package(ament_cmake REQUIRED) 的</span></span><br><span class="line">ament_target_dependencies(demo_one_node rclcpp)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 demo_one_node 拷贝到 install目录下</span></span><br><span class="line">install(TARGETS demo_one_node# 这里执行后目录就已经是 install/demo_one_pkg/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝到 install/pkg_name/lib/pkg_name/ 下</span></span><br><span class="line">DESTINATION lib/$&#123;PROJECT_NAME&#125;# 这里执行后最后目录就是 install/demo_one_pkg/lib/demo_one_pkg/</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">if(BUILD_TESTING)</span><br><span class="line">  find_package(ament_lint_auto REQUIRED)</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">the following line skips the linter <span class="built_in">which</span> checks <span class="keyword">for</span> copyrights</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">comment the line when a copyright and license is added to all <span class="built_in">source</span> files</span></span><br><span class="line">  set(ament_cmake_copyright_FOUND TRUE)</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">the following line skips cpplint (only works <span class="keyword">in</span> a git repo)</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">comment the line when this package is <span class="keyword">in</span> a git repo and when</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">a copyright and license is added to all <span class="built_in">source</span> files</span></span><br><span class="line">  set(ament_cmake_cpplint_FOUND TRUE)</span><br><span class="line">  ament_lint_auto_find_test_dependencies()</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line">ament_package()</span><br></pre></td></tr></table></figure><h3 id="在与-CMakeLists-txt-同级目录下还有一个-package-xml-文件，在该文件中也要对引用的头文件进行声明"><a href="#在与-CMakeLists-txt-同级目录下还有一个-package-xml-文件，在该文件中也要对引用的头文件进行声明" class="headerlink" title="在与 CMakeLists.txt 同级目录下还有一个 package.xml 文件，在该文件中也要对引用的头文件进行声明"></a>在与 CMakeLists.txt 同级目录下还有一个 package.xml 文件，在该文件中也要对引用的头文件进行声明</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-model href=<span class="string">&quot;http://download.ros.org/schema/package_format3.xsd&quot;</span> schematypens=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">format</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo_one_pkg<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>TODO: Package description<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maintainer</span> <span class="attr">email</span>=<span class="string">&quot;yanzu@todo.todo&quot;</span>&gt;</span>yanzu<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">license</span>&gt;</span>Apache-2.0<span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 在这里添加头文件的声明 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">depend</span>&gt;</span>rclcpp<span class="tag">&lt;/<span class="name">depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>ament_cmake<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">test_depend</span>&gt;</span>ament_lint_auto<span class="tag">&lt;/<span class="name">test_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">test_depend</span>&gt;</span>ament_lint_common<span class="tag">&lt;/<span class="name">test_depend</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">export</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build_type</span>&gt;</span>ament_cmake<span class="tag">&lt;/<span class="name">build_type</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">export</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="然后就可以对包进行编译了，编译时必须要在包的上一路径打开终端进行编译"><a href="#然后就可以对包进行编译了，编译时必须要在包的上一路径打开终端进行编译" class="headerlink" title="然后就可以对包进行编译了，编译时必须要在包的上一路径打开终端进行编译"></a>然后就可以对包进行编译了，编译时必须要在包的上一路径打开终端进行编译</h3><h3 id="在正式编译之前，可以在包目录下创建一个-build-文件先测试一下编译能否通过，创建这个build的目的是为了存放编译生成的文件"><a href="#在正式编译之前，可以在包目录下创建一个-build-文件先测试一下编译能否通过，创建这个build的目的是为了存放编译生成的文件" class="headerlink" title="在正式编译之前，可以在包目录下创建一个 build 文件先测试一下编译能否通过，创建这个build的目的是为了存放编译生成的文件"></a>在正式编译之前，可以在包目录下创建一个 build 文件先测试一下编译能否通过，创建这个build的目的是为了存放编译生成的文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build/</span><br><span class="line">cmake ../</span><br><span class="line">make</span><br></pre></td></tr></table></figure><h3 id="因为-CMakeLists-txt-在上一级目录中，要使其转换为-makefile-，所以是-cmake"><a href="#因为-CMakeLists-txt-在上一级目录中，要使其转换为-makefile-，所以是-cmake" class="headerlink" title="因为 CMakeLists.txt 在上一级目录中，要使其转换为 makefile ，所以是 cmake ..&#x2F;"></a>因为 CMakeLists.txt 在上一级目录中，要使其转换为 makefile ，所以是 cmake ..&#x2F;</h3><h3 id="这里在-demo-one-pkg-的上一路径下进行编译，也即-chapter-2-路径下进行编译"><a href="#这里在-demo-one-pkg-的上一路径下进行编译，也即-chapter-2-路径下进行编译" class="headerlink" title="这里在 demo_one_pkg 的上一路径下进行编译，也即 chapter_2&#x2F; 路径下进行编译"></a>这里在 demo_one_pkg 的上一路径下进行编译，也即 chapter_2&#x2F; 路径下进行编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">colcon build</span><br></pre></td></tr></table></figure><h3 id="编译成功后，显示如下信息"><a href="#编译成功后，显示如下信息" class="headerlink" title="编译成功后，显示如下信息"></a>编译成功后，显示如下信息</h3><p><img src="http://picbed.yanzu.tech/img/learn_ros2/pic_7.png"></p><h3 id="此时，chapter-2-路径下分别有这些文件，build、install、log、demo-one-pkg"><a href="#此时，chapter-2-路径下分别有这些文件，build、install、log、demo-one-pkg" class="headerlink" title="此时，chapter_2&#x2F; 路径下分别有这些文件，build、install、log、demo_one_pkg"></a>此时，chapter_2&#x2F; 路径下分别有这些文件，build、install、log、demo_one_pkg</h3><h3 id="生成的可执行文件-demo-one-node-在-build-pkg-name-下，在该路径下，执行以下命令，可以查看当前节点依赖了哪些库，是否链接上"><a href="#生成的可执行文件-demo-one-node-在-build-pkg-name-下，在该路径下，执行以下命令，可以查看当前节点依赖了哪些库，是否链接上" class="headerlink" title="生成的可执行文件 demo_one_node 在 build&#x2F;pkg_name&#x2F; 下，在该路径下，执行以下命令，可以查看当前节点依赖了哪些库，是否链接上"></a>生成的可执行文件 demo_one_node 在 build&#x2F;pkg_name&#x2F; 下，在该路径下，执行以下命令，可以查看当前节点依赖了哪些库，是否链接上</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldd demo_one_node</span><br></pre></td></tr></table></figure><h3 id="正式运行节点之前要添加环境变量，可以使用以下命令查看当前包的环境变量是否配置了，未配置直接运行节点会显示找不到当前的包-以下命令都是在-chapter-2-路径下执行"><a href="#正式运行节点之前要添加环境变量，可以使用以下命令查看当前包的环境变量是否配置了，未配置直接运行节点会显示找不到当前的包-以下命令都是在-chapter-2-路径下执行" class="headerlink" title="正式运行节点之前要添加环境变量，可以使用以下命令查看当前包的环境变量是否配置了，未配置直接运行节点会显示找不到当前的包(以下命令都是在 chapter_2&#x2F; 路径下执行)"></a>正式运行节点之前要添加环境变量，可以使用以下命令查看当前包的环境变量是否配置了，未配置直接运行节点会显示找不到当前的包(以下命令都是在 chapter_2&#x2F; 路径下执行)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printenv | grep AMENT</span><br></pre></td></tr></table></figure><h3 id="使用以下命令进行环境变量配置"><a href="#使用以下命令进行环境变量配置" class="headerlink" title="使用以下命令进行环境变量配置"></a>使用以下命令进行环境变量配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source install/setup.bash</span><br></pre></td></tr></table></figure><h3 id="再使用上面查看环境变量的命令看看是否配置成功，最后运行节点（ros2-run-pkg-name-node-name）"><a href="#再使用上面查看环境变量的命令看看是否配置成功，最后运行节点（ros2-run-pkg-name-node-name）" class="headerlink" title="再使用上面查看环境变量的命令看看是否配置成功，最后运行节点（ros2 run pkg_name node_name）"></a>再使用上面查看环境变量的命令看看是否配置成功，最后运行节点（ros2 run pkg_name node_name）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run demo_one_pkg demo_one_node</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ROS2 </tag>
            
            <tag> Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下安装与激活Typora</title>
      <link href="/2025/01/02/04/"/>
      <url>/2025/01/02/04/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu下安装与激活Typora"><a href="#Ubuntu下安装与激活Typora" class="headerlink" title="Ubuntu下安装与激活Typora"></a>Ubuntu下安装与激活Typora</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><h3 id="直接在官网下载最新版-https-typora-io-releases-all"><a href="#直接在官网下载最新版-https-typora-io-releases-all" class="headerlink" title="直接在官网下载最新版 https://typora.io/releases/all"></a>直接在官网下载最新版 <a href="https://typora.io/releases/all">https://typora.io/releases/all</a></h3><h3 id="下载好-deb-之后，安装"><a href="#下载好-deb-之后，安装" class="headerlink" title="下载好 deb 之后，安装"></a>下载好 deb 之后，安装</h3><blockquote><h3 id="sudo-dpkg-i-xxx-deb"><a href="#sudo-dpkg-i-xxx-deb" class="headerlink" title="sudo dpkg -i xxx.deb"></a>sudo dpkg -i xxx.deb</h3></blockquote><h2 id="2-激活"><a href="#2-激活" class="headerlink" title="2.激活"></a>2.激活</h2><h3 id="在home下打开终端，依次执行以下命令"><a href="#在home下打开终端，依次执行以下命令" class="headerlink" title="在home下打开终端，依次执行以下命令"></a>在home下打开终端，依次执行以下命令</h3><blockquote><h3 id="git-clone-https-github-com-hazukieq-Yporaject-git"><a href="#git-clone-https-github-com-hazukieq-Yporaject-git" class="headerlink" title="git clone https://github.com/hazukieq/Yporaject.git"></a>git clone <a href="https://github.com/hazukieq/Yporaject.git">https://github.com/hazukieq/Yporaject.git</a></h3><h3 id="sudo-apt-install-cargo"><a href="#sudo-apt-install-cargo" class="headerlink" title="sudo apt install cargo"></a>sudo apt install cargo</h3><h3 id="cd-Yporaject"><a href="#cd-Yporaject" class="headerlink" title="cd Yporaject&#x2F;"></a>cd Yporaject&#x2F;</h3><h3 id="这一步最好打开梯子"><a href="#这一步最好打开梯子" class="headerlink" title="# 这一步最好打开梯子"></a># 这一步最好打开梯子</h3><h3 id="cargo-build"><a href="#cargo-build" class="headerlink" title="cargo build"></a>cargo build</h3><h3 id="最后显示-finished-就说明成功了"><a href="#最后显示-finished-就说明成功了" class="headerlink" title="最后显示 finished 就说明成功了"></a>最后显示 finished 就说明成功了</h3><p><img src="http://picbed.yanzu.tech/img/learn_ros2/pic_4.png"></p><h3 id="ls一下，看看有没有出现可执行文件-node-inject"><a href="#ls一下，看看有没有出现可执行文件-node-inject" class="headerlink" title="# ls一下，看看有没有出现可执行文件 node_inject"></a># ls一下，看看有没有出现可执行文件 node_inject</h3><h3 id="ls-target-debug"><a href="#ls-target-debug" class="headerlink" title="ls target&#x2F;debug"></a>ls target&#x2F;debug</h3><h3 id="cargo-run"><a href="#cargo-run" class="headerlink" title="cargo run"></a>cargo run</h3><h3 id="sudo-cp-target-debug-node-inject-usr-share-typora"><a href="#sudo-cp-target-debug-node-inject-usr-share-typora" class="headerlink" title="sudo cp target&#x2F;debug&#x2F;node_inject &#x2F;usr&#x2F;share&#x2F;typora"></a>sudo cp target&#x2F;debug&#x2F;node_inject &#x2F;usr&#x2F;share&#x2F;typora</h3><h3 id="上面的终端不要关闭"><a href="#上面的终端不要关闭" class="headerlink" title="上面的终端不要关闭"></a>上面的终端不要关闭</h3></blockquote><h3 id="在-home-下打开新的终端，依次执行一下命令，"><a href="#在-home-下打开新的终端，依次执行一下命令，" class="headerlink" title="在 home 下打开新的终端，依次执行一下命令，"></a>在 home 下打开新的终端，依次执行一下命令，</h3><blockquote><h3 id="cd-usr-share-typora"><a href="#cd-usr-share-typora" class="headerlink" title="cd &#x2F;usr&#x2F;share&#x2F;typora&#x2F;"></a>cd &#x2F;usr&#x2F;share&#x2F;typora&#x2F;</h3><h3 id="权限拉闷"><a href="#权限拉闷" class="headerlink" title="# 权限拉闷"></a># 权限拉闷</h3><h3 id="sudo-chmod-777-node-inject"><a href="#sudo-chmod-777-node-inject" class="headerlink" title="sudo chmod 777 node_inject"></a>sudo chmod 777 node_inject</h3><h3 id="sudo-node-inject"><a href="#sudo-node-inject" class="headerlink" title="sudo .&#x2F;node_inject"></a>sudo .&#x2F;node_inject</h3><h3 id="终端输出了以下信息就说明可以了"><a href="#终端输出了以下信息就说明可以了" class="headerlink" title="# 终端输出了以下信息就说明可以了"></a># 终端输出了以下信息就说明可以了</h3><h3 id="extracting-node-modules-asar"><a href="#extracting-node-modules-asar" class="headerlink" title="extracting node_modules.asar"></a>extracting node_modules.asar</h3><h3 id="adding-hook-js"><a href="#adding-hook-js" class="headerlink" title="adding hook.js"></a>adding hook.js</h3><h3 id="applying-patch"><a href="#applying-patch" class="headerlink" title="applying patch"></a>applying patch</h3><h3 id="packing-node-modules-asar"><a href="#packing-node-modules-asar" class="headerlink" title="packing node_modules.asar"></a>packing node_modules.asar</h3><h3 id="done"><a href="#done" class="headerlink" title="done!"></a>done!</h3><h3 id="可以关掉这个终端了"><a href="#可以关掉这个终端了" class="headerlink" title="可以关掉这个终端了"></a>可以关掉这个终端了</h3></blockquote><h3 id="返回之前的终端，依次执行以下命令，"><a href="#返回之前的终端，依次执行以下命令，" class="headerlink" title="返回之前的终端，依次执行以下命令，"></a>返回之前的终端，依次执行以下命令，</h3><blockquote><h3 id="cd-license-gen"><a href="#cd-license-gen" class="headerlink" title="cd license-gen&#x2F;"></a>cd license-gen&#x2F;</h3><h3 id="这一步同样打开梯子进行"><a href="#这一步同样打开梯子进行" class="headerlink" title="# 这一步同样打开梯子进行"></a># 这一步同样打开梯子进行</h3><h3 id="cargo-build-1"><a href="#cargo-build-1" class="headerlink" title="cargo build"></a>cargo build</h3><h3 id="cargo-run-1"><a href="#cargo-run-1" class="headerlink" title="cargo run"></a>cargo run</h3><h3 id="然后就得到了激活码了"><a href="#然后就得到了激活码了" class="headerlink" title="然后就得到了激活码了"></a>然后就得到了激活码了</h3></blockquote><h3 id="这个激活教程真的太6了，当然不是我自己原创，在“垃圾堆”里面找到的，原作者也不知道是不是他，贴一手地址，"><a href="#这个激活教程真的太6了，当然不是我自己原创，在“垃圾堆”里面找到的，原作者也不知道是不是他，贴一手地址，" class="headerlink" title="这个激活教程真的太6了，当然不是我自己原创，在“垃圾堆”里面找到的，原作者也不知道是不是他，贴一手地址，"></a>这个激活教程真的太6了，当然不是我自己原创，在“垃圾堆”里面找到的，原作者也不知道是不是他，贴一手地址，</h3><h3 id="https-blog-csdn-net-weixin-65657501-article-details-142788747"><a href="#https-blog-csdn-net-weixin-65657501-article-details-142788747" class="headerlink" title="https://blog.csdn.net/weixin_65657501/article/details/142788747"></a><a href="https://blog.csdn.net/weixin_65657501/article/details/142788747">https://blog.csdn.net/weixin_65657501/article/details/142788747</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三弹</title>
      <link href="/2025/01/01/03/"/>
      <url>/2025/01/01/03/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-CMakeLists-管理-cpp"><a href="#使用-CMakeLists-管理-cpp" class="headerlink" title="使用 CMakeLists 管理 cpp"></a>使用 CMakeLists 管理 cpp</h1><h3 id="在当前目录下创建一个-cpp-文件，如-hello-cpp，内容就是输出-hello-world"><a href="#在当前目录下创建一个-cpp-文件，如-hello-cpp，内容就是输出-hello-world" class="headerlink" title="在当前目录下创建一个 cpp 文件，如 hello.cpp，内容就是输出 hello world"></a>在当前目录下创建一个 cpp 文件，如 hello.cpp，内容就是输出 hello world</h3><h3 id="再创建一个-CMakeLists-txt-的文件，内容如下"><a href="#再创建一个-CMakeLists-txt-的文件，内容如下" class="headerlink" title="再创建一个 CMakeLists.txt 的文件，内容如下:"></a>再创建一个 CMakeLists.txt 的文件，内容如下:</h3><blockquote><h3 id="指定-cmake-的最小版本"><a href="#指定-cmake-的最小版本" class="headerlink" title="# 指定 cmake 的最小版本"></a># 指定 cmake 的最小版本</h3><h3 id="cmake-minimum-required-VERSION-3-8"><a href="#cmake-minimum-required-VERSION-3-8" class="headerlink" title="cmake_minimum_required(VERSION 3.8)"></a>cmake_minimum_required(VERSION 3.8)</h3><h3 id="项目名称"><a href="#项目名称" class="headerlink" title="# 项目名称"></a># 项目名称</h3><h3 id="project-hello"><a href="#project-hello" class="headerlink" title="project(hello)"></a>project(hello)</h3><h3 id="添加可执行文件，-可执行文件名，源文件名"><a href="#添加可执行文件，-可执行文件名，源文件名" class="headerlink" title="# 添加可执行文件，(可执行文件名，源文件名)"></a># 添加可执行文件，(可执行文件名，源文件名)</h3><h3 id="add-executable-learn-cmake-hello-cpp"><a href="#add-executable-learn-cmake-hello-cpp" class="headerlink" title="add_executable(learn_cmake hello.cpp)"></a>add_executable(learn_cmake hello.cpp)</h3></blockquote><h3 id="然后执行命令-当前路径下打开命令框-，将-cmake-转换为-makefile"><a href="#然后执行命令-当前路径下打开命令框-，将-cmake-转换为-makefile" class="headerlink" title="然后执行命令(当前路径下打开命令框)，将 cmake 转换为 makefile"></a>然后执行命令(当前路径下打开命令框)，将 cmake 转换为 makefile</h3><blockquote><h3 id="cmake-后面跟的是目录"><a href="#cmake-后面跟的是目录" class="headerlink" title="# cmake 后面跟的是目录"></a># cmake 后面跟的是目录</h3><h3 id="cmake"><a href="#cmake" class="headerlink" title="$ cmake ."></a>$ cmake .</h3></blockquote><h3 id="再执行命令，编译生成可执行文件"><a href="#再执行命令，编译生成可执行文件" class="headerlink" title="再执行命令，编译生成可执行文件"></a>再执行命令，编译生成可执行文件</h3><blockquote><h3 id="make"><a href="#make" class="headerlink" title="$ make"></a>$ make</h3></blockquote><h3 id="此时就生成了可执行文件-learn-cmake-了，可以直接运行"><a href="#此时就生成了可执行文件-learn-cmake-了，可以直接运行" class="headerlink" title="此时就生成了可执行文件 learn_cmake 了，可以直接运行"></a>此时就生成了可执行文件 learn_cmake 了，可以直接运行</h3><blockquote><h3 id="learn-cmake"><a href="#learn-cmake" class="headerlink" title="$ .&#x2F;learn_cmake"></a>$ .&#x2F;learn_cmake</h3></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ROS2 </tag>
            
            <tag> Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二弹</title>
      <link href="/2025/01/01/02/"/>
      <url>/2025/01/01/02/</url>
      
        <content type="html"><![CDATA[<h1 id="常用的-Linux-操作命令"><a href="#常用的-Linux-操作命令" class="headerlink" title="常用的 Linux 操作命令"></a>常用的 Linux 操作命令</h1><h3 id="当前终端所在目录"><a href="#当前终端所在目录" class="headerlink" title="当前终端所在目录"></a>当前终端所在目录</h3><blockquote><h3 id="pwd"><a href="#pwd" class="headerlink" title="$ pwd"></a>$ pwd</h3></blockquote><h3 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h3><blockquote><h3 id="cat-name-txt"><a href="#cat-name-txt" class="headerlink" title="$ cat name.txt"></a>$ cat name.txt</h3></blockquote><h3 id="卸载某个包"><a href="#卸载某个包" class="headerlink" title="卸载某个包"></a>卸载某个包</h3><blockquote><h3 id="sudo-apt-remove-pkg-name"><a href="#sudo-apt-remove-pkg-name" class="headerlink" title="$ sudo apt remove pkg_name"></a>$ sudo apt remove pkg_name</h3></blockquote><h3 id="安装-deb"><a href="#安装-deb" class="headerlink" title="安装 .deb"></a>安装 .deb</h3><blockquote><h3 id="sudo-dpkg-i-file-name-deb"><a href="#sudo-dpkg-i-file-name-deb" class="headerlink" title="$ sudo dpkg -i file_name.deb"></a>$ sudo dpkg -i file_name.deb</h3></blockquote><h3 id="解压-tar-gz-tgz"><a href="#解压-tar-gz-tgz" class="headerlink" title="解压 .tar.gz&#x2F;.tgz"></a>解压 .tar.gz&#x2F;.tgz</h3><blockquote><h3 id="tar-xzvf-file-tar-gz-C-path"><a href="#tar-xzvf-file-tar-gz-C-path" class="headerlink" title="$ tar -xzvf file.tar.gz -C &#x2F;path"></a>$ tar -xzvf file.tar.gz -C &#x2F;path</h3></blockquote><h3 id="解压-zip"><a href="#解压-zip" class="headerlink" title="解压 .zip"></a>解压 .zip</h3><blockquote><h3 id="unzip-file-zip-d-path"><a href="#unzip-file-zip-d-path" class="headerlink" title="$ unzip file.zip -d &#x2F;path"></a>$ unzip file.zip -d &#x2F;path</h3></blockquote><h3 id="解压-rar"><a href="#解压-rar" class="headerlink" title="解压 .rar"></a>解压 .rar</h3><blockquote><h3 id="unrar-x-file-rar"><a href="#unrar-x-file-rar" class="headerlink" title="$ unrar x file.rar"></a>$ unrar x file.rar</h3></blockquote><h3 id="查找某个文件"><a href="#查找某个文件" class="headerlink" title="查找某个文件"></a>查找某个文件</h3><blockquote><h3 id="whereis-file-name"><a href="#whereis-file-name" class="headerlink" title="$ whereis file_name"></a>$ whereis file_name</h3></blockquote><h3 id="使用-nano-编辑文本"><a href="#使用-nano-编辑文本" class="headerlink" title="使用 nano 编辑文本"></a>使用 nano 编辑文本</h3><blockquote><h3 id="nano-file-name"><a href="#nano-file-name" class="headerlink" title="$ nano file_name"></a>$ nano file_name</h3></blockquote><h3 id="查看执行过的命令"><a href="#查看执行过的命令" class="headerlink" title="查看执行过的命令"></a>查看执行过的命令</h3><blockquote><h3 id="history"><a href="#history" class="headerlink" title="$ history"></a>$ history</h3></blockquote><h3 id="终端中的复制粘贴快捷键"><a href="#终端中的复制粘贴快捷键" class="headerlink" title="终端中的复制粘贴快捷键"></a>终端中的复制粘贴快捷键</h3><blockquote><h3 id="ctrl-shift-C-ctrl-shift-V"><a href="#ctrl-shift-C-ctrl-shift-V" class="headerlink" title="ctrl + shift + C &#x2F; ctrl + shift + V"></a>ctrl + shift + C &#x2F; ctrl + shift + V</h3></blockquote><h3 id="终端中执行-py"><a href="#终端中执行-py" class="headerlink" title="终端中执行 .py"></a>终端中执行 .py</h3><blockquote><h3 id="python3-file-name-py"><a href="#python3-file-name-py" class="headerlink" title="$ python3 file_name.py"></a>$ python3 file_name.py</h3></blockquote><h3 id="给文件添加权限，文件或者目录的权限分为三类，权限也分为三类"><a href="#给文件添加权限，文件或者目录的权限分为三类，权限也分为三类" class="headerlink" title="给文件添加权限，文件或者目录的权限分为三类，权限也分为三类"></a>给文件添加权限，文件或者目录的权限分为三类，权限也分为三类</h3><blockquote><h4 id="1-用户-user-u-：文件拥有者"><a href="#1-用户-user-u-：文件拥有者" class="headerlink" title="1.用户(user,u)：文件拥有者"></a>1.用户(user,u)：文件拥有者</h4><h4 id="2-组-group-g-：与user在同一组的用户"><a href="#2-组-group-g-：与user在同一组的用户" class="headerlink" title="2.组(group,g)：与user在同一组的用户"></a>2.组(group,g)：与user在同一组的用户</h4><h4 id="3-其他人-others-o-：所有其他用户"><a href="#3-其他人-others-o-：所有其他用户" class="headerlink" title="3.其他人(others,o)：所有其他用户"></a>3.其他人(others,o)：所有其他用户</h4><h4 id="读，r，值为-4-；写，w，值为-2-；执行，x，值为-1"><a href="#读，r，值为-4-；写，w，值为-2-；执行，x，值为-1" class="headerlink" title="读，r，值为 4 ；写，w，值为 2 ；执行，x，值为 1"></a>读，r，值为 4 ；写，w，值为 2 ；执行，x，值为 1</h4></blockquote><h3 id="赋予所有用户执行权，添加权限就是-，移除权限就是"><a href="#赋予所有用户执行权，添加权限就是-，移除权限就是" class="headerlink" title="赋予所有用户执行权，添加权限就是 + ，移除权限就是 -"></a>赋予所有用户执行权，添加权限就是 + ，移除权限就是 -</h3><blockquote><h3 id="chmod-a-x-file"><a href="#chmod-a-x-file" class="headerlink" title="$ chmod a+x file"></a>$ chmod a+x file</h3></blockquote><h3 id="查看文件-目录权限"><a href="#查看文件-目录权限" class="headerlink" title="查看文件&#x2F;目录权限"></a>查看文件&#x2F;目录权限</h3><blockquote><h3 id="ls-l-file"><a href="#ls-l-file" class="headerlink" title="$ ls -l file"></a>$ ls -l file</h3></blockquote><p><img src="http://picbed.yanzu.tech/img/learn_ros2/pic_3.png" alt="pic"></p><h3 id="要在命令框中直接执行-py-文件，不使用-python3-file-py，要指定编译器，在-py-文件顶部添加"><a href="#要在命令框中直接执行-py-文件，不使用-python3-file-py，要指定编译器，在-py-文件顶部添加" class="headerlink" title="要在命令框中直接执行 .py 文件，不使用 python3 file.py，要指定编译器，在 .py 文件顶部添加"></a>要在命令框中直接执行 .py 文件，不使用 python3 file.py，要指定编译器，在 .py 文件顶部添加</h3><blockquote><h3 id="usr-bin-python3"><a href="#usr-bin-python3" class="headerlink" title="#!usr&#x2F;bin&#x2F;python3"></a>#!usr&#x2F;bin&#x2F;python3</h3><h3 id="然后就可以使用"><a href="#然后就可以使用" class="headerlink" title="然后就可以使用"></a>然后就可以使用</h3><h3 id="file-py"><a href="#file-py" class="headerlink" title="$ .&#x2F;file.py"></a>$ .&#x2F;file.py</h3></blockquote><h3 id="echo-指令的使用，echo-本身的功能就是打印其后的字符"><a href="#echo-指令的使用，echo-本身的功能就是打印其后的字符" class="headerlink" title="echo 指令的使用，echo 本身的功能就是打印其后的字符"></a>echo 指令的使用，echo 本身的功能就是打印其后的字符</h3><blockquote><h3 id="可以找到跟在其后的字符的环境变量，echo-就能打印该环境变量"><a href="#可以找到跟在其后的字符的环境变量，echo-就能打印该环境变量" class="headerlink" title="$ 可以找到跟在其后的字符的环境变量，echo 就能打印该环境变量"></a>$ 可以找到跟在其后的字符的环境变量，echo 就能打印该环境变量</h3><h3 id="echo-ROS-VERSION"><a href="#echo-ROS-VERSION" class="headerlink" title="$ echo $ROS_VERSION"></a>$ echo $ROS_VERSION</h3><h3 id="查看-ros-的发行版本"><a href="#查看-ros-的发行版本" class="headerlink" title="# 查看 ros 的发行版本"></a># 查看 ros 的发行版本</h3><h3 id="echo-ROS-DISTRO"><a href="#echo-ROS-DISTRO" class="headerlink" title="$ echo $ROS_DISTRO"></a>$ echo $ROS_DISTRO</h3></blockquote><h3 id="查看所有环境变量列表"><a href="#查看所有环境变量列表" class="headerlink" title="查看所有环境变量列表"></a>查看所有环境变量列表</h3><blockquote><h3 id="printenv"><a href="#printenv" class="headerlink" title="$ printenv"></a>$ printenv</h3></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ROS2 </tag>
            
            <tag> Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一弹</title>
      <link href="/2024/12/04/01/"/>
      <url>/2024/12/04/01/</url>
      
        <content type="html"><![CDATA[<h1 id="ROS2-的安装"><a href="#ROS2-的安装" class="headerlink" title="ROS2 的安装"></a>ROS2 的安装</h1><h3 id="鱼香ROS安装命令"><a href="#鱼香ROS安装命令" class="headerlink" title="鱼香ROS安装命令"></a>鱼香ROS安装命令</h3><blockquote><h3 id="wget-http-fishros-com-install-O-fishros-bash-fishros"><a href="#wget-http-fishros-com-install-O-fishros-bash-fishros" class="headerlink" title="$ wget http://fishros.com/install -O fishros &amp;&amp; bash fishros"></a>$ wget <a href="http://fishros.com/install">http://fishros.com/install</a> -O fishros &amp;&amp; bash fishros</h3></blockquote><h3 id="安装成功后可使用以下命令查看"><a href="#安装成功后可使用以下命令查看" class="headerlink" title="安装成功后可使用以下命令查看"></a>安装成功后可使用以下命令查看</h3><blockquote><h3 id="ros2"><a href="#ros2" class="headerlink" title="$ ros2"></a>$ ros2</h3></blockquote><h3 id="测试安装是否成功，运行小海龟"><a href="#测试安装是否成功，运行小海龟" class="headerlink" title="测试安装是否成功，运行小海龟"></a>测试安装是否成功，运行小海龟</h3><h4 id="先运行一个小海龟节点"><a href="#先运行一个小海龟节点" class="headerlink" title="先运行一个小海龟节点"></a>先运行一个小海龟节点</h4><blockquote><h3 id="ros2-run-turtlesim-turtlesim-node"><a href="#ros2-run-turtlesim-turtlesim-node" class="headerlink" title="$ ros2 run turtlesim turtlesim_node"></a>$ ros2 run turtlesim turtlesim_node</h3></blockquote><h4 id="新建一个命令框运行另外一个节点，与前一个节点通信，从而通过键盘来控制小海龟移动"><a href="#新建一个命令框运行另外一个节点，与前一个节点通信，从而通过键盘来控制小海龟移动" class="headerlink" title="新建一个命令框运行另外一个节点，与前一个节点通信，从而通过键盘来控制小海龟移动"></a>新建一个命令框运行另外一个节点，与前一个节点通信，从而通过键盘来控制小海龟移动</h4><blockquote><h3 id="ros2-run-turtlesim-turtle-teleop-key"><a href="#ros2-run-turtlesim-turtle-teleop-key" class="headerlink" title="$ ros2 run turtlesim turtle_teleop_key"></a>$ ros2 run turtlesim turtle_teleop_key</h3></blockquote><p><img src="http://picbed.yanzu.tech/img/learn_ros2/pic_1.png" alt="pic"></p><h4 id="此时可以再新建一个命令框，执行"><a href="#此时可以再新建一个命令框，执行" class="headerlink" title="此时可以再新建一个命令框，执行"></a>此时可以再新建一个命令框，执行</h4><blockquote><h3 id="rqt"><a href="#rqt" class="headerlink" title="$ rqt"></a>$ rqt</h3></blockquote><h3 id="点击-plugins-introspection-node-graph，就可以看到当前两个节点之间的通信情况了"><a href="#点击-plugins-introspection-node-graph，就可以看到当前两个节点之间的通信情况了" class="headerlink" title="点击 plugins -&gt; introspection -&gt; node graph，就可以看到当前两个节点之间的通信情况了"></a>点击 plugins -&gt; introspection -&gt; node graph，就可以看到当前两个节点之间的通信情况了</h3><h3 id="teleop-turtle-通过-turtle1-cmd-vel-对-turtlesim-进行控制"><a href="#teleop-turtle-通过-turtle1-cmd-vel-对-turtlesim-进行控制" class="headerlink" title="teleop_turtle 通过 &#x2F;turtle1&#x2F;cmd_vel 对 turtlesim 进行控制"></a>teleop_turtle 通过 &#x2F;turtle1&#x2F;cmd_vel 对 turtlesim 进行控制</h3><p><img src="http://picbed.yanzu.tech/img/learn_ros2/pic_2.png" alt="pic"></p><h3 id="ros2-run-turtlesim-turtlesim-node-这条命令是什么意思，又是如何执行的？"><a href="#ros2-run-turtlesim-turtlesim-node-这条命令是什么意思，又是如何执行的？" class="headerlink" title="ros2 run turtlesim turtlesim_node 这条命令是什么意思，又是如何执行的？"></a>ros2 run turtlesim turtlesim_node 这条命令是什么意思，又是如何执行的？</h3><blockquote><h3 id="首先，-ros2-run-会找到一个环境变量-AMENT-PREFIX-PATH，可能有多个值，多值就循环遍历"><a href="#首先，-ros2-run-会找到一个环境变量-AMENT-PREFIX-PATH，可能有多个值，多值就循环遍历" class="headerlink" title="首先， ros2 run 会找到一个环境变量 AMENT_PREFIX_PATH，可能有多个值，多值就循环遍历"></a>首先， ros2 run 会找到一个环境变量 AMENT_PREFIX_PATH，可能有多个值，多值就循环遍历</h3><h3 id="接着，在这个环境变量对应的路径下去找-lib-文件，找到后再在其目录下找-turtlesim-包"><a href="#接着，在这个环境变量对应的路径下去找-lib-文件，找到后再在其目录下找-turtlesim-包" class="headerlink" title="接着，在这个环境变量对应的路径下去找 lib 文件，找到后再在其目录下找 turtlesim 包"></a>接着，在这个环境变量对应的路径下去找 lib 文件，找到后再在其目录下找 turtlesim 包</h3><h3 id="找到对应的包之后，在其目录下找到可执行文件-turtlesim-node，然后执行"><a href="#找到对应的包之后，在其目录下找到可执行文件-turtlesim-node，然后执行" class="headerlink" title="找到对应的包之后，在其目录下找到可执行文件 turtlesim_node，然后执行"></a>找到对应的包之后，在其目录下找到可执行文件 turtlesim_node，然后执行</h3><h3 id="那么可以直接使用以下命令代替执行对应的可执行文件"><a href="#那么可以直接使用以下命令代替执行对应的可执行文件" class="headerlink" title="那么可以直接使用以下命令代替执行对应的可执行文件"></a>那么可以直接使用以下命令代替执行对应的可执行文件</h3><h3 id="但只能是-AMENT-PREFIX-PATH-opt-ros-humble-的情况下才能这么执行"><a href="#但只能是-AMENT-PREFIX-PATH-opt-ros-humble-的情况下才能这么执行" class="headerlink" title="(但只能是 AMENT_PREFIX_PATH&#x3D;&#x2F;opt&#x2F;ros&#x2F;humble 的情况下才能这么执行)"></a>(但只能是 AMENT_PREFIX_PATH&#x3D;&#x2F;opt&#x2F;ros&#x2F;humble 的情况下才能这么执行)</h3><h3 id="AMENT-PREFIX-PATH-lib-turtlesim-turtlesim-node"><a href="#AMENT-PREFIX-PATH-lib-turtlesim-turtlesim-node" class="headerlink" title="$ $AMENT_PREFIX_PATH&#x2F;lib&#x2F;turtlesim&#x2F;turtlesim_node"></a>$ $AMENT_PREFIX_PATH&#x2F;lib&#x2F;turtlesim&#x2F;turtlesim_node</h3></blockquote><h3 id="修改环境变量，-export-环境变量名-path"><a href="#修改环境变量，-export-环境变量名-path" class="headerlink" title="修改环境变量， export 环境变量名&#x3D;path"></a>修改环境变量， export 环境变量名&#x3D;path</h3><blockquote><h3 id="export-AMENT-PREFIX-PATH-opt-ros"><a href="#export-AMENT-PREFIX-PATH-opt-ros" class="headerlink" title="export AMENT_PREFIX_PATH&#x3D;&#x2F;opt&#x2F;ros"></a>export AMENT_PREFIX_PATH&#x3D;&#x2F;opt&#x2F;ros</h3></blockquote><h3 id="在-linux-中，以-点-如-a-txt-开头的文件或文件夹是隐藏文件"><a href="#在-linux-中，以-点-如-a-txt-开头的文件或文件夹是隐藏文件" class="headerlink" title="在 linux 中，以 点(如 .a.txt) 开头的文件或文件夹是隐藏文件"></a>在 linux 中，以 点(如 .a.txt) 开头的文件或文件夹是隐藏文件</h3><blockquote><h3 id="查看当前目录下的所有文件，包括隐藏文件"><a href="#查看当前目录下的所有文件，包括隐藏文件" class="headerlink" title="查看当前目录下的所有文件，包括隐藏文件"></a>查看当前目录下的所有文件，包括隐藏文件</h3><h3 id="ls-a"><a href="#ls-a" class="headerlink" title="$ ls -a"></a>$ ls -a</h3></blockquote><h3 id="只要一打开终端，就会默认启动一个脚本-bashrc，他会设置一系列的环境变量"><a href="#只要一打开终端，就会默认启动一个脚本-bashrc，他会设置一系列的环境变量" class="headerlink" title="只要一打开终端，就会默认启动一个脚本 .bashrc，他会设置一系列的环境变量"></a>只要一打开终端，就会默认启动一个脚本 .bashrc，他会设置一系列的环境变量</h3>]]></content>
      
      
      
        <tags>
            
            <tag> ROS2 </tag>
            
            <tag> Learning </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
